name: Angular CD

on:
  workflow_call:
    inputs:
      branch-name:
        description: 'Branch que disparou o deploy'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      S3_BUCKET_NAME:
        required: true
      CLOUDFRONT_ID:
        required: true
      AWS_REGION:
        required: false
      PAT_TOKEN:
        required: true   # Token para abrir PR

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      CLOUDFRONT_ID: ${{ secrets.CLOUDFRONT_ID }}
    steps:
      # Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Instalar dependências
      - name: Install dependencies
        run: npm ci

      # Build Angular na develop
      - name: Build Angular
        run: npm run build -- --configuration production

      # Obter build path dinamicamente do angular.json
      - name: Get build path dynamically
        id: get-build-path
        run: |
          PROJECT="${{ inputs.project }}"
          if [ -z "$PROJECT" ]; then
            echo "Nenhum input recebido, detectando primeiro projeto do angular.json..."
            PROJECT=$(node -p "Object.keys(require('./angular.json').projects)[0]")
          fi
          echo "Usando projeto: $PROJECT"
          BUILD_PATH=$(node -p "require('./angular.json').projects[\"$PROJECT\"].architect.build.options.outputPath")
          echo "Usando o outputPath: $BUILD_PATH"
          echo "BUILD_PATH=$BUILD_PATH" >> $GITHUB_ENV
          echo "PROJECT=$PROJECT" >> $GITHUB_ENV

      # Configurar AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Detectar versão ativa/inativa
      - name: Detect active/inactive version
        id: detect
        run: |
          ACTIVE=$(aws cloudfront get-distribution --id $CLOUDFRONT_ID | jq -r '.Distribution.Origins.Items[0].OriginPath')
          if [[ "$ACTIVE" == "/blue" ]]; then
            INACTIVE="green"
          else
            INACTIVE="blue"
          fi
          echo "ACTIVE=$ACTIVE" >> $GITHUB_ENV
          echo "INACTIVE=$INACTIVE" >> $GITHUB_ENV
          echo "previous-path=$ACTIVE" >> $GITHUB_OUTPUT

      # Deploy para pasta inativa com timestamp
      - name: Deploy to INACTIVE folder with timestamp
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          INACTIVE_PATH="$INACTIVE/$TIMESTAMP"
          echo "Deploying build to folder $INACTIVE_PATH"
          aws s3 sync ${{ env.BUILD_PATH }} s3://$S3_BUCKET_NAME/$INACTIVE_PATH --delete
          echo "DEPLOY_PATH=/$INACTIVE_PATH" >> $GITHUB_ENV

      # Cleanup builds antigas (mantendo 3 últimas)
      - name: Cleanup old builds
        run: |
          for folder in blue green; do
            builds=$(aws s3 ls s3://$S3_BUCKET_NAME/$folder/ | awk '{print $2}' | sort)
            total=$(echo "$builds" | wc -l)
            if [ $total -gt 3 ]; then
              to_delete=$(echo "$builds" | head -n $(($total - 3)))
              for d in $to_delete; do
                aws s3 rm s3://$S3_BUCKET_NAME/$folder/$d --recursive
              done
            fi
          done

      # Swap CloudFront para nova versão
      - name: Swap CloudFront
        run: |
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id $CLOUDFRONT_ID)
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "$DEPLOY_PATH" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id $CLOUDFRONT_ID --if-match $ETAG --distribution-config "$UPDATED_CONFIG"

      # Invalidação de cache CloudFront
      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"

      - name: Open Pull Request to main
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          source_branch: ${{ inputs.branch-name }}
          destination_branch: main
          pr_title: "Merge ${{ inputs.branch-name }} into main"
          pr_body: |
            PR automática criada pelo pipeline.
            Branch de origem: `${{ inputs.branch-name }}`

      # Rollback em caso de falha
      - name: Rollback if failure
        if: failure()
        run: |
          echo "Rollback triggered. Reverting to previous version: ${{ steps.detect.outputs.previous-path }}"
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id $CLOUDFRONT_ID)
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "${{ steps.detect.outputs.previous-path }}" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id $CLOUDFRONT_ID --if-match $ETAG --distribution-config "$UPDATED_CONFIG"

  open-pr-main:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Open Pull Request to main
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          source_branch: ${{ inputs.branch-name }}
          destination_branch: main
          pr_title: "PR automatic ${{ inputs.branch-name }} into main"
          pr_body: |
            PR automática criada pelo pipeline.
            Branch de origem: `${{ inputs.branch-name }}`
